//use next-auth package for authentication in nextjs

//yarn add next-auth

//create pages/api/auth/[...nextauth].js 
import NextAuth from 'next-auth'
import Providers from 'next-auth/providers'

export default NextAuth({
    providers: [
        Providers.GitHub({
            clientId: process.env.GITHUB_ID,
            clientSecret: process.env.GITHUB_SECRET
        })
    ],
})
//can auth using github with address/api/auth/signin and address/api/auth/logout
//if user sign in with github a token will added to cookies and if signout it will be removed
//to make a button do the sign in sign out:
import Link from 'next/link'
import { signIn, signOut, useSession } from 'next-auth/client'
<Link href='/api/auth/signin'>
    <a
        onClick={e => {
            e.preventDefault()
            signIn('github') //we add "github" if we want to auto sign in using github
        }}>
        Sign In
    </a>
</Link>

//to check if user is logged in or not we use useSession hook
//in components/navbar.js
import Link from 'next/link'
import { signIn, signOut, useSession } from 'next-auth/client'

function Navbar() {
    const [session, loading] = useSession()
    return (
        <nav className='header'>
            <h1 className='logo'>
                <a href='#'>NextAuth</a>
            </h1>
            <ul className={`main-nav ${!session && loading ? 'loading' : 'loaded'}`}>
                <li>
                    <Link href='/'>
                        <a>Home</a>
                    </Link>
                </li>
                <li>
                    <Link href='/dashboard'>
                        <a>Dashboard</a>
                    </Link>
                </li>
                <li>
                    <Link href='/blog'>
                        <a>Blog</a>
                    </Link>
                </li>

                {!loading && !session && (
                    <li>
                        <Link href='/api/auth/signin'>
                            <a
                                onClick={e => {
                                    e.preventDefault()
                                    signIn('github')
                                }}>
                                Sign In
                            </a>
                        </Link>
                    </li>
                )}
                {session && (
                    <li>
                        <Link href='/api/auth/signout'>
                            <a
                                onClick={e => {
                                    e.preventDefault()
                                    signOut()
                                }}>
                                Sign Out
                            </a>
                        </Link>
                    </li>
                )}
            </ul>
        </nav>
    )
}
//export default Navbar

// if we want a page to be only available to a user if they are logged in like dashboard page

//in pages/dashboard.js 
import { useState, useEffect } from 'react'
import { getSession, signIn } from 'next-auth/client'

function Dashboard() {
    const [loading, setLoading] = useState(true)

    useEffect(() => {
        const securePage = async () => {
            const session = await getSession()
            console.log({ session })
            if (!session) {
                signIn()
            } else {
                setLoading(false)
            }
        }

        securePage()
    }, [])

    if (loading) {
        return <h2>Loading...</h2>
    }
    return <h1>Dashboard page</h1>
}
//export default Dashboard


// the good way of doing auth check is to use Provider 
//in _app.js
import { Provider } from 'next-auth/client'
import Navbar from '../components/Navbar'
import '../styles/globals.css'
import '../components/Navbar.css'

function MyApp({ Component, pageProps }) {
    return (
        <Provider session={pageProps.session}>
            <Navbar />
            <Component {...pageProps} />
        </Provider>
    )
}
//export default MyApp

//in index.js   
import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import { useSession } from 'next-auth/client'

export function Home() {
    const [session, loading] = useSession()
    console.log({ session, loading })
    return (
        <div className={styles.container}>
            <Head>
                <title>Create Next App</title>
                <meta name='description' content='Generated by create next app' />
                <link rel='icon' href='/favicon.ico' />
            </Head>

            <main className={styles.main}>
                <h1 className={styles.title}>
                    {session ? `${session.user.name}, ` : ''}Welcome to{' '}
                    <a href='https://nextjs.org'>Next.js!</a>
                </h1>
            </main>
        </div>

    )
}

//serverside authentication

//in _app.js
import { Provider } from 'next-auth/client'
import Navbar from '../components/Navbar'
import '../styles/globals.css'
import '../components/Navbar.css'

function MyApp({ Component, pageProps }) {
    return (
        <Provider session={pageProps.session}>
            <Navbar />
            <Component {...pageProps} />
        </Provider>
    )
}
//export default MyApp
//in pages/blog.js
import { getSession, useSession } from 'next-auth/client'

function Blog({ data }) {
    const [session] = useSession() //this is for using to prevent flicker just in this page
    console.log({ session })

    return <h1>Blog page - {data}</h1>
}
//export default Blog

export async function getServerSideProps(context) {
    const session = await getSession(context)
    //to show only for logged in users
    if (!session) {
        return {
            redirect: {
                destination: '/api/auth/signin?callbackUrl=http://localhost:3000/blog',
                permanent: false //we say this redirect is just for when user is not logged in
            }
        }
    }
    return {
        props: {
            data: 'List of 100 personalized blogs',
            session //this is for using it in Provider to prevent flicker
        }
    }
}


// securing API routes

//in pages/api/test-session.js
import { getSession } from 'next-auth/client'
/*
export default async (req, res) => {
    const session = await getSession({ req })
    if (!session) {
        res.status(401).json({ error: 'Unauthenticated user' })
    } else {
        res.status(200).json({ message: 'Success', session })
    }
}*/


//to connect the auth to database
//in pages/api/auth/[...nextauth].js
import NextAuth from 'next-auth'
import Providers from 'next-auth/providers'
//export default -  
NextAuth({
    providers: [
        Providers.GitHub({
            clientId: process.env.GITHUB_ID,
            clientSecret: process.env.GITHUB_SECRET
        })
    ],
    database: process.env.DB_URL,
    session: {
        jwt: true
    },
    jwt: {
        secret: 'asdcvbtjhm'
    }
})
//also you need to create the database and add the info to environment variables and use it here


//to add another property to the session object like a uniqe id
//in pages/api/auth/[...nextauth].js 
import NextAuth from 'next-auth'
import Providers from 'next-auth/providers'
//export default -  
NextAuth({
    providers: [
        Providers.GitHub({
            clientId: process.env.GITHUB_ID,
            clientSecret: process.env.GITHUB_SECRET
        })
    ],
    database: process.env.DB_URL,
    session: {
        jwt: true
    },
    jwt: {
        secret: 'asdcvbtjhm'
    },
    callbacks: {
        async jwt(token, user) {
            if (user) {
                token.id = user.id
            }
            return token
        },
        async session(session, token) {
            session.user.id = token.id
            return session
        }
    }
})